import numpy as np
import math as m

deck = np.ones((4,13))
com_card = []
hole_card1 = 0 + 0j
hole_card2 = 11 + 3j
rand1 = int(13*np.random.rand())
rand2 = int(4*np.random.rand())
com_card.append(complex(rand1,rand2))







def trip_prob(card1, card2, num_players):
    prob = 0.0
    interm = 0
    intial_cards = 52 - 2*num_players
    card1_suit = int(card1.imag)
    card1_base = int(card1.real)
    deck[card1_suit][card1_base] = 0

    card2_suit = int(card2.imag)
    card2_base = int(card2.real)
    deck[card2_suit][card2_base] = 0

    for i in range(len(com_card)):
        com_card_suit = int(com_card[i].imag)
        com_card_base = int(com_card[i].real)

        deck[com_card_suit][com_card_base] = 0
        

    for i in range(13):
        for j in range(4):
            interm = interm + deck[j][i]
            
        prob =  prob + m.factorial(interm - 1) 
        interm = 0
        
   # prob = prob*(m.factorial(
    



        



def trip_calc(num_players):
    i_c = 52.0 - 2.0*num_players            #initial cards
    n_c_l = (i_c/52.0)*3.0  #number of cards left
    prob1 = np.zeros(7)
    prob2 = np.zeros(7)
    prob3 = np.zeros(7)
    prob = 0.0
    test = 0

    for i in np.arange(i_c, i_c - 7.0, -1.0):
        prob1[i_c - i] =  i
        prob2[i_c - i] = (i - 1.0)
        prob3[i_c - i] = (i - 2.0)

    print prob3[5]

    for i in range(7):
        for j in range(i,7):
            for k in range(j,5):
                prob = prob + prob1[i]*prob2[j]*prob3[k]
    
       
    return prob

print trip_calc(0.0)

##for i in np.arange(0.0, 11.0):
##    print trip_calc(i), i
